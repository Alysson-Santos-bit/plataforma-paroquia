version: '3.8'

services:

--- Serviço de Frontend (React + Nginx) ---
frontend:
# O nome deste serviço é 'frontend'
container_name: parish_frontend
# Constrói a imagem a partir do Dockerfile na pasta atual (ou ./frontend se estiver separado)
build:
context: . # ou ./frontend
dockerfile: frontend.Dockerfile
ports:
# Mapeia a porta 80 do seu computador para a porta 80 do contentor
- "80:80"
# Garante que o frontend só arranca depois do backend estar pronto
depends_on:
- backend

--- Serviço de Backend (Aplicação Go) ---
backend:
# O nome deste serviço é 'backend', que corresponde ao 'proxy_pass' no nginx.conf
container_name: parish_backend
build:
context: ./backend # Assumindo que o seu código Go está numa pasta 'backend'
dockerfile: backend.Dockerfile # Você precisará de um Dockerfile para o Go
ports:
# Expõe a porta 8080 para que o Nginx possa comunicar com ela
- "8080:8080"
# Garante que o backend só arranca depois da base de dados estar pronta
depends_on:
- db
# Variáveis de ambiente, como as credenciais da base de dados
environment:
- DB_USER=user
- DB_PASSWORD=password
- DB_NAME=parishdb
- DB_HOST=db

--- Serviço da Base de Dados (Exemplo com Postgres) ---
db:
image: postgres:15-alpine
container_name: parish_db
environment:
- POSTGRES_USER=user
- POSTGRES_PASSWORD=password
- POSTGRES_DB=parishdb
volumes:
- postgres_data:/var/lib/postgresql/data
ports:
# Mapeia a porta 5432 do seu computador para a base de dados, para debugging
- "5432:5432"

volumes:
postgres_data: